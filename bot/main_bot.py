# bot/main_bot.py

import asyncio
import logging
import os
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo 
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ó–ê–ì–õ–£–®–ö–ò: –°—é–¥–∞ –º—ã –≤—Å—Ç–∞–≤–∏–º –ø—É–±–ª–∏—á–Ω—ã–µ URL –æ—Ç VS Code
WEB_APP_URL = "https://tattoofest-app.vercel.app" 
BACKEND_URL = "https://tattoofest-app.vercel.app/api"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class Registration(StatesGroup):
    waiting_for_access_code = State()

def check_user_in_backend(telegram_id: int):
    try:
        response = requests.get(f"{BACKEND_URL}/users/by_telegram_id/{telegram_id}")
        return response.json() if response.status_code == 200 else None
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def activate_user_in_backend(telegram_id: int, access_code: str):
    try:
        response = requests.post(f"{BACKEND_URL}/activate_user", json={"telegram_id": telegram_id, "access_code": access_code})
        return response.json() if response.status_code == 200 else None
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    user_data = check_user_in_backend(message.from_user.id)
    if user_data:
        role = user_data.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞').capitalize()
        web_app_info = WebAppInfo(url=WEB_APP_URL)
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=web_app_info)]], resize_keyboard=True)
        await message.answer(f"–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n–í–∞—à–∞ —Ä–æ–ª—å: **{role}**.", reply_markup=keyboard)
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.")
        await state.set_state(Registration.waiting_for_access_code)

@dp.message(Registration.waiting_for_access_code, F.text)
async def process_access_code(message: types.Message, state: FSMContext):
    user_data = activate_user_in_backend(message.from_user.id, message.text.strip())
    if user_data:
        role = user_data.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞').capitalize()
        web_app_info = WebAppInfo(url=WEB_APP_URL)
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=web_app_info)]], resize_keyboard=True)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç.\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å —Ä–æ–ª—å—é: **{role}**.", reply_markup=keyboard)
        await state.clear()
    else:
        await message.answer("–£–≤—ã, —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
